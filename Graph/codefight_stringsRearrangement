https://codefights.com/challenge/RWQS5cCEodqSWx4bR

Hamiltonian Path


static boolean stringsRearrangement(String[] inputArray) {   
		 
		 boolean[][] adjlist = new boolean [inputArray.length][inputArray.length];
		 
		    for (int i = 0; i< inputArray.length; i++){
		        for(int j = 0; j< inputArray.length; j++){
		        	adjlist [i][j]= adj(inputArray[i],inputArray[j]);
		        }
            }
		 return check_using_dfs(adjlist,inputArray.length);
		 
}
	 
public static boolean adj(String word1, String word2){
		    int diff=0;
		    for(int i = 0; i < word1.length(); i++) {
		            if(word1.charAt(i) != word2.charAt(i)) {
		                diff++;
		                if(diff>1)
		                    return false;
		           }
		    }
		    if(diff==1)
		        return true;
		    return false;
}
		  

	static boolean dfs(int v, boolean adj[][], boolean label[], int instack_count, int n){
        if(instack_count == n)
            return true;
        for(int i=0; i<n; i++)
            if(adj[v][i] && label[i] == false){
                label[i]=true;
                if(dfs(i, adj, label, instack_count+1, n))
                    return true;
                label[i]=false;
            }
        return false;
}
static boolean check_using_dfs(boolean adj[][], int n){
        boolean label[]=new boolean [n];
        for(int i=0; i<n; i++)
            label[i]=false;
        for(int i=0; i<n; i++){
            label[i]=true;;
            if(dfs(i, adj, label, 1, n))
                return true;
            label[i]=false;
        }
        return false;
}
